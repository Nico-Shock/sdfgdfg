#include <iostream>
#include <windows.h>

bool IsUserAnAdmin()
{
    BOOL isAdmin = FALSE;
    PSID AdministratorsGroup = NULL;
    SID_IDENTIFIER_AUTHORITY NtAuthority = SECURITY_NT_AUTHORITY;

    if (AllocateAndInitializeSid(&NtAuthority, 2, SECURITY_BUILTIN_DOMAIN_RID, DOMAIN_ALIAS_RID_ADMINS, 0, 0, 0, 0, 0, 0, &AdministratorsGroup))
    {
        CheckTokenMembership(NULL, AdministratorsGroup, &isAdmin);
        FreeSid(AdministratorsGroup);
    }

    return isAdmin == TRUE;
}

void SetRegistryValue()
{
    HKEY hKey;
    LONG result;
    const char* regPath = "SOFTWARE\\Policies\\Microsoft\\Windows\\System";

    result = RegOpenKeyEx(HKEY_LOCAL_MACHINE, regPath, 0, KEY_WRITE, &hKey);

    if (result == ERROR_SUCCESS)
    {
        DWORD value = 1;
        result = RegSetValueEx(hKey, "DisableCMD", 0, REG_DWORD, (const BYTE*)&value, sizeof(value));
        
        if (result == ERROR_SUCCESS)
        {
            std::cout << "Die Registrierung wurde erfolgreich geändert." << std::endl;
        }
        else
        {
            std::cout << "Fehler beim Setzen des Registrierungseintrags." << std::endl;
        }

        RegCloseKey(hKey);
    }
    else
    {
        std::cout << "Fehler beim Öffnen des Registrierungsschlüssels." << std::endl;
    }
}

int main()
{
    if (!IsUserAnAdmin())
    {
        std::wcout << L"Administratorrechte erforderlich, starte mit Administratorrechten..." << std::endl;
        std::wstring command = L"runas /user:Administrator ";
        command += GetCommandLineW();
        _wsystem(command.c_str());
        return 0;
    }

    SetRegistryValue();
    return 0;
}
